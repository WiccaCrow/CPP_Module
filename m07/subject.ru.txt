C ++ - Модуль 07

C ++ Шаблоны

Описание: В этом документе содержится тема для модуля 07 модулей C ++.
Версия: 6
_____________________________________________________________________
СОДЕРЖАНИЕ

I    Общие правила ...............................................   2
II   Упражнение 00: несколько функций ............................   4
III  Упражнение 01: Iter .........................................   6
IV   Упражнение 02: Массив .......................................   7
_____________________________________________________________________
Глава I
Основные правила

Для модулей C ++ вы будете использовать и изучать только C ++ 98.
Цель состоит в том, чтобы вы изучили основы объектно-ориентированного языка 
программирования.
Мы знаем, что современный C ++ сильно отличается во многих аспектах, поэтому, 
если вы хотите стать опытным разработчиком C ++, позже вам понадобится 
современный стандартный C ++. Это будет отправной точкой вашего пути к C ++, 
и вам решать, как продвигаться дальше после 42 Common Core!

• Любая функция, реализованная в заголовке (кроме шаблонов), и любой 
  незащищенный заголовок означает 0 для упражнения.

• Каждый вывод переходит в стандартный вывод и будет заканчиваться новой 
  строкой, если не указано иное.

• Введенные имена файлов должны следовать до буквы, так же как имена классов, 
  имена функций и имена методов.

• Помните: вы сейчас кодите на C ++, а не на C. Следовательно:

      ◦ Следующие функции ЗАПРЕЩЕНЫ, и их использование будет наказано 0, 
        без вопросов: *	alloc, * printf и free.

      ◦ Вам разрешено использовать все, что есть в стандартной библиотеке. 
        ОДНАКО, было бы разумно попытаться использовать версии C ++ функций, 
        к которым вы привыкли в C, вместо того, чтобы просто придерживаться 
        того, что вы знаете, в конце концов, это новый язык. 
        И НЕТ, вам не разрешается использовать STL до тех пор, пока вы не должны 
        (то есть до модуля 08). Это означает, что до тех пор нет 
        векторов / списков / карт / и т. Д. ... 
        или чего-либо, что требует включения <algorithm>.

• Фактически, использование любой явно запрещенной функции или механизма будет 
  наказываться 0 без вопросов.

• Также обратите внимание, что если не указано иное, ключевые слова C ++ 
  «using namespace» и «friend» запрещены. Их использование будет наказано -42, 
  без вопросов.

• Файлы, связанные с классом, всегда будут ClassName.hpp и ClassName.cpp, 
  если не указано иное.

• Каталоги сдачи: ex00 /, ex01 /,. . . , exn /.

• Вы должны внимательно прочитать примеры. Они могут содержать требования, 
  которые не очевидны в описании упражнения.

• Поскольку вам разрешено использовать инструменты C ++, о которых вы узнали с 
  самого начала, вам не разрешается использовать какие-либо внешние библиотеки. 
  И прежде чем вы спросите, это также означает отсутствие C ++ 11 и его 
  производных, Boost или чего-либо еще.

• От вас могут потребовать сдать большое количество занятий. Это может 
  показаться утомительным, если вы не умеете писать скрипт в своем любимом 
  текстовом редакторе.

• Прочтите каждое упражнение ПОЛНОСТЬЮ перед тем, как приступить к нему! 
  Сделай это.

• Используемый компилятор - c ++.

• Ваш код должен быть скомпилирован со следующими флагами: 
  -Wall -Wextra -Werror.

• Каждое из ваших включений должно иметь возможность включаться независимо от 
  других. Включаемые элементы должны содержать все остальные включения, от 
  которых они зависят.

• Если вам интересно, в C ++ стиль кодирования не применяется. 
  Вы можете использовать любой понравившийся стиль, без ограничений. 
  Но помните, что код, который ваш коллега-оценщик не может прочитать, - 
  это код, который они не могут оценить.

• Важный момент: вы НЕ будете оцениваться программой, если это явно не указано 
  в теме. Таким образом, вам предоставляется определенная свобода в выборе 
  выполнения упражнений. Однако помните об ограничениях каждого упражнения и 
  НЕ ленитесь, вы пропустите МНОГО из того, что они могут предложить.

• Не проблема иметь какие-то посторонние файлы в том, что вы передаете, 
  вы можете разделить свой код на большее количество файлов, чем то, что от 
  вас требуется. Не стесняйтесь, если результат не оценивается программой.

• Даже если тема упражнения короткая, стоит потратить на нее некоторое 
  время, чтобы убедиться, что вы понимаете, чего от вас ждут, и что вы 
  сделали это наилучшим образом.

• Один, Тор! Используй свой мозг!!!
_____________________________________________________________________
Глава II.
Упражнение 00:  A few functions

_________________________________________________________
|           Упражнение: 00                              |
|_______________________________________________________|
|           Упражнение 00: несколько функций            |
|_______________________________________________________|
|   Каталог сдачи: ex00/                                |
|_______________________________________________________|
|   Файлы для передачи: whatever.hpp, main.cpp and a    |
|                       Makefile                        |
|_______________________________________________________|
|   Допустимые функции: никакие                         |
|_______________________________________________________|

Напишите следующие шаблоны функций:
      • swap: меняет местами значения двух аргументов. Ничего не возвращает.
      • min: сравнивает два аргумента и возвращает наименьший из них. 
        Если два аргумента равны, возвращается второй.
      • max: сравнивает два аргумента и возвращает самый большой. 
        Если два аргумента равны, возвращается второй.

Шаблоны должны быть определены в файлах заголовков. 
Вы должны включить main.cpp, содержащий тесты для вашей программы. 
Этот файл может и будет изменен во время оценки. 
Эти функции могут быть вызваны с любым типом аргумента, 
при условии, что два аргумента имеют один и тот же тип и 
поддерживают все операторы сравнения. 
Предоставьте достаточно кода для компиляции исполняемого 
файла, подтверждающего, что все работает по назначению.

Следующий код:

int main( void ) 
{
    int a = 2;
    int b = 3;

    ::swap( a, b );

    std::cout << "a = " << a << ", b = " << b << std::endl;
    std::cout << "min( a, b ) = " << ::min( a, b ) << std::endl;
    std::cout << "max( a, b ) = " << ::max( a, b ) << std::endl;
    
    std::string c = "chaine1";
    std::string d = "chaine2";

    ::swap(c, d);

    std::cout << "c = " << c << ", d = " << d << std::endl;
    std::cout << "min( c, d ) = " << ::min( c, d ) << std::endl;
    std::cout << "max( c, d ) = " << ::max( c, d ) << std::endl;
    
    return 0;
}

Должен вывести следующее, если вы все сделали правильно:

a = 3, b = 2
min(a, b) = 2
max(a, b) = 3
c = chaine2, d = chaine1
min(c, d) = chaine1
max(c, d) = chaine2
_____________________________________________________________________
Глава III.

Упражнение 01: Iter

_________________________________________________________
|           Упражнение: 01                              |
|_______________________________________________________|
|           Упражнение 01: Iter                         |
|_______________________________________________________|
|   Каталог сдачи: ex01/                                |
|_______________________________________________________|
|   Файлы для передачи: : iter.hpp, main.cpp and a      |
|                         Makefile                      |
|_______________________________________________________|
|   Разрешенные функции: нет                            |
|_______________________________________________________|

Напишите шаблон функции, который принимает 3 параметра и ничего не возвращает. 
Первый параметр - это адрес массива, 
второй - длина массива, а 
третий - функция, вызываемая для каждого элемента массива.

Оберните свою работу в исполняемый файл, который доказывает, 
что ваш шаблон функции работает с любым типом массива и / или 
с созданным шаблоном функции в качестве третьего параметра.


_____________________________________________________________________
Глава IV.

Упражнение 02:  Array

_________________________________________________________________
|                        Упражнение: 02                         |
|_______________________________________________________________|
|                       Упражнение 02: Массив.                  |
|_______________________________________________________________|
|    Каталог сдачи: ex02/                                       |
|_______________________________________________________________|
|   Файлы для передачи:   Array.hpp, main.cpp and a Makefile    |
|                                                               |
|_______________________________________________________________|
|   Разрешенные функции: нет                                    |
|_______________________________________________________________|

Напишите шаблонный класс Array, который содержит элементы типа T 
и допускает следующее поведение:
    • Конструктор без параметров: 
        создает пустой массив.
    • Конструктор с unsigned int n в качестве параметра: 
        создает массив из n элементов, инициализированных по умолчанию. 
        (Совет: попробуйте скомпилировать int * a = new int ();
        , затем отобразите * a.)
    • Конструкцию присваивания и оператор копирования. 
        В обоих случаях изменение одного из двух массивов 
        после копирования / присваивания не повлияет ни на 
        что в другом массиве.
    • Вы ДОЛЖНЫ использовать оператор new [] для выделения. 
        Вы не должны делать профилактическое размещение. 
        Ваш код никогда не должен обращаться к нераспределенной памяти.
    • Элементы доступны через оператор [].
    • При доступе к элементу с помощью оператора [], 
        если этот элемент выходит за пределы, 
        генерируется исключение std :: exception.
    • функция-член size, которая возвращает количество элементов в массиве. 
        Эта функция-член не принимает параметров и никоим образом 
        не изменяет текущий экземпляр.

Оберните свою работу в исполняемый файл, который докажет, 
что ваш шаблон класса работает так, как задумано.