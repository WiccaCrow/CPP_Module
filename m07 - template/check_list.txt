ex00

class Awesome 
{ 
    public: 
        Awesome(void) : _n(0) {} 
        Awesome(intn):_n(n){} 
        Awesome& operator=(Awesome & a) { _n=a._n; return*this; } 

        bool operator==(Awesomeconst & rhs) const { return(this->_n==rhs._n); } 
        bool operator!=(Awesomeconst & rhs) const { return(this->_n!=rhs._n); } 
        bool operator>(Awesomeconst & rhs) const { return(this->_n>rhs._n); } 
        bool operator<(Awesomeconst & rhs) const { return(this->_n<rhs._n); } 
        bool operator>=(Awesomeconst & rhs) const { return(this->_n>=rhs._n); } 
        bool operator<=(Awesomeconst & rhs) const { return(this->_n<=rhs._n); } 
        
        int get_n() const { return _n; } 
        
    private: 
        int _n; 
}; 

std::ostream & operator<<(std::ostream & o,const Awesome & a) { o << a.get_n() ; return o ; }




int main(void) 
{ 
    Awesome a(2), b(4);
    swap(a, b);
    std::cout << a << "" << b << std::endl; 
    std::cout << max(a,b) << std::endl; 
    std::cout << min(a,b) << std::endl; 
    return (0); 
}


////////////////////////////////////////////////////////////////////////////////

ex01

class Awesome 
{ 
    public: 
        Awesome(void) : _n(42) { return; } 
        int get(void) const { return this->_n; }        
        
    private: 
        int _n; 
}; 

std::ostream & operator<<(std::ostream & o,const Awesome & rhs) { o << rhs.get() ; return o ; }

template<typename T>
void    print(T const & x) {std::cout << x << std::endl; return; }


int main(void) 
{ 
    int tab[] = { 0, 1, 2, 3, 4 }; // <--- I never understood why you can't write int[] tab. Wouldn't that make more sense? 
    Awesome tab2[5];

    iter( tab, 5, print ); 
    iter( tab2, 5, print );

    return (0); 
}

////////////////////////////////////////////////////////////////////////////////

ex02

В этом упражнении ученик должен написать шаблон класса, который ведет себя как массив. 
Если внутреннее распределение фактического массива не связано с использованием new [], 
не оценивайте это упражнение. Попросите учащегося перед выставлением оценок доказать, 
что шаблон класса работает с массивами простых и сложных типов.

Элементы должны быть доступны для чтения и записи с помощью оператора [] 
(или просто для чтения, если экземпляр имеет значение const). 
Доступ к элементу за пределами ограничений должен вызывать исключение std :: exception.
