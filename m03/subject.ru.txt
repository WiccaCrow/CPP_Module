C++ - Module 03

Наследование

Описание: Этот документ содержит тему для модуля 03 модулей C ++.
Версия: 6
_____________________________________________________________________
СОДЕРЖАНИЕ

I   Общие правила ................................................   2
II 	Упражнение 00: Иииии ... ОТКРЫТЬ! ............................   4
III Упражнение 01: Серена, любовь моя! ...........................   5
IV 	Упражнение 02: Повторяющаяся работа ..........................   6
V 	Упражнение 03: Теперь это странно! ...........................   7

Contents
I General rules 
II Exercise 00: Aaaaand... OPEN! 
III Exercise 01: Serena, my love! 
IV Exercise 02: Repetitive work 
V Exercise 03: Now it’s weird! 

_____________________________________________________________________
Глава I
Основные правила

Для модулей C ++ вы будете использовать и изучать только C ++ 98.
Цель состоит в том, чтобы вы изучили основы объектно-ориентированного языка 
программирования.
Мы знаем, что современный C ++ сильно отличается во многих аспектах, поэтому, 
если вы хотите стать опытным разработчиком C ++, позже вам понадобится 
современный стандартный C ++. Это будет отправной точкой вашего пути к C ++, 
и вам решать, как продвигаться дальше после 42 Common Core!

• Любая функция, реализованная в заголовке (кроме шаблонов), и любой 
  незащищенный заголовок означает 0 для упражнения.

• Каждый вывод переходит в стандартный вывод и будет заканчиваться новой 
  строкой, если не указано иное.

• Введенные имена файлов должны следовать до буквы, так же как имена классов, 
  имена функций и имена методов.

• Помните: вы сейчас кодите на C ++, а не на C. Следовательно:

      ◦ Следующие функции ЗАПРЕЩЕНЫ, и их использование будет наказано 0, 
        без вопросов: *	alloc, * printf и free.

      ◦ Вам разрешено использовать все, что есть в стандартной библиотеке. 
        ОДНАКО, было бы разумно попытаться использовать версии C ++ функций, 
        к которым вы привыкли в C, вместо того, чтобы просто придерживаться 
        того, что вы знаете, в конце концов, это новый язык. 
        И НЕТ, вам не разрешается использовать STL до тех пор, пока вы не должны 
        (то есть до модуля 08). Это означает, что до тех пор нет 
        векторов / списков / карт / и т. Д. ... 
        или чего-либо, что требует включения <algorithm>.

• Фактически, использование любой явно запрещенной функции или механизма будет 
  наказываться 0 без вопросов.

• Также обратите внимание, что если не указано иное, ключевые слова C ++ 
  «using namespace» и «friend» запрещены. Их использование будет наказано -42, 
  без вопросов.

• Файлы, связанные с классом, всегда будут ClassName.hpp и ClassName.cpp, 
  если не указано иное.

• Каталоги сдачи: ex00 /, ex01 /,. . . , exn /.

• Вы должны внимательно прочитать примеры. Они могут содержать требования, 
  которые не очевидны в описании упражнения.

• Поскольку вам разрешено использовать инструменты C ++, о которых вы узнали с 
  самого начала, вам не разрешается использовать какие-либо внешние библиотеки. 
  И прежде чем вы спросите, это также означает отсутствие C ++ 11 и его 
  производных, Boost или чего-либо еще.

• От вас могут потребовать сдать большое количество занятий. Это может 
  показаться утомительным, если вы не умеете писать скрипт в своем любимом 
  текстовом редакторе.

• Прочтите каждое упражнение ПОЛНОСТЬЮ перед тем, как приступить к нему! 
  Сделай это.

• Используемый компилятор - c ++.

• Ваш код должен быть скомпилирован со следующими флагами: 
  -Wall -Wextra -Werror.

• Каждое из ваших включений должно иметь возможность включаться независимо от 
  других. Включаемые элементы должны содержать все остальные включения, от 
  которых они зависят.

• Если вам интересно, в C ++ стиль кодирования не применяется. 
  Вы можете использовать любой понравившийся стиль, без ограничений. 
  Но помните, что код, который ваш коллега-оценщик не может прочитать, - 
  это код, который они не могут оценить.

• Важный момент: вы НЕ будете оцениваться программой, если это явно не указано 
  в теме. Таким образом, вам предоставляется определенная свобода в выборе 
  выполнения упражнений. Однако помните об ограничениях каждого упражнения и 
  НЕ ленитесь, вы пропустите МНОГО из того, что они могут предложить.

• Не проблема иметь какие-то посторонние файлы в том, что вы передаете, 
  вы можете разделить свой код на большее количество файлов, чем то, что от 
  вас требуется. Не стесняйтесь, если результат не оценивается программой.

• Даже если тема упражнения короткая, стоит потратить на нее некоторое 
  время, чтобы убедиться, что вы понимаете, чего от вас ждут, и что вы 
  сделали это наилучшим образом.

• Один, Тор! Используй свой мозг!!!
_____________________________________________________________________
Глава II.
Упражнение 00: Aaaaand... OPEN!

_________________________________________________________
|           Упражнение: 00                              |
|_______________________________________________________|
|           Иииии ... ОТКРЫТЬ!                          |
|_______________________________________________________|
|   Каталог сдачи: ex00/                                |
|_______________________________________________________|
|   Файлы для передачи: Makefile ClapTrap.cpp           |
|                       ClapTrap.hpp main.cpp           |
|_______________________________________________________|
|   Запрещенные функции: Нет                            |
|_______________________________________________________|

Здесь надо сделать класс! Как оригинально!

Класс будет называться ClapTrap и будет иметь следующие частные атрибуты,
инициализируемые указанными значениями:

• Имя (параметр конструктора)
• Здоровье (10)
• Очки энергии (10)
• Урон от атаки (0)

• Name (Parameter of constructor)
• Hitpoints (10)
• Energy points (10)
• Attack damage (0)

Вы также дадите ему несколько общедоступных функций, чтобы сделать его более 
реалистичным:

• void attack(std::string const & target)
• void takeDamage(unsigned int amount)
• void beRepaired(unsigned int amount)

Во всех этих функциях вы должны отображать что-то, чтобы описать происходящее.

Например, функция атаки может отображать что-то вроде:
ClapTrap <имя> атакует <цель>, нанося <повреждение> единиц урона!
ClapTrap <name> attack <target>, causing <damage> points of damage!

Конструктор и деструктор также должны что-то отображать, чтобы люди могли 
видеть, что они были вызваны.
Вы предоставите основную функцию с достаточным количеством тестов, чтобы 
продемонстрировать, что ваш код функциональный.
_____________________________________________________________________
Глава III.

Упражнение 01: Serena, my love!

_________________________________________________________
|           Упражнение: 01                              |
|_______________________________________________________|
|           Серена, любовь моя!                         |
|_______________________________________________________|
|   Каталог сдачи: ex01/                                |
|_______________________________________________________|
|   Файлы для передачи: : Same as previous exercise +   |
|                         ScavTrap.cpp ScavTrap.hpp     |
|_______________________________________________________|
|   Запрещенные функции: нет                            |
|_______________________________________________________|

Поскольку у нас никогда не будет достаточно Хлопушки, теперь ты сделаешь еще 
одну.

Класс будет называться ScavTrap и будет унаследован от ClapTrap, конструктор, 
деструктор и атака должны использовать разные выходные данные. 
В конце концов, Claptrap должен обладать определенной индивидуальностью.

У класса ScavTrap будут сообщения о создании и уничтожении. 
Кроме того, должна присутствовать правильная цепочка построения / разрушения 
(когда вы строите ScavTrap, вы должны начать с создания ClapTrap ... 
Разрушение происходит в обратном порядке), и тесты должны это показать.

ScavTrap будет использовать атрибуты Claptrap (вам нужно соответственно 
изменить Claptrap)! И должны инициализировать их:
• Имя (параметр конструктора)
• Здоровье (100)
• Очки энергии (50)
• урон от атаки (20)

• Name (Parameter of constructor)
• Hitpoints (100)
• Energy points (50)
• attack damage (20)

ScavTrap также будет иметь новую специальную функцию: 
void guardGate();

эта функция будет отображать сообщение на стандартных выходах, 
чтобы сообщить, что ScavTrap вошел в режим Gate keeper.

Расширьте свою основную функцию, чтобы все проверить.
_____________________________________________________________________
Глава IV.

Упражнение 02:  Repetitive work

_________________________________________________________________
|                        Упражнение: 02                         |
|_______________________________________________________________|
|                      Повторяющаяся работа                     |
|_______________________________________________________________|
|    Каталог сдачи: ex02/                                       |
|_______________________________________________________________|
|    Файлы для передачи: Same as previous exercise +            |
|                        FragTrap.cpp FragTrap.hpp              |
|_______________________________________________________________|
|    Запрещенные функции: нет                                   |
|_______________________________________________________________|

Изготовление Claptraps, вероятно, начинает действовать вам на нервы.

Теперь вы создадите класс FragTrap, унаследованный от ClapTrap.

• Имя (параметр конструктора)
• Здоровье (100)
• Очки энергии (100)
• урон от атаки (30)

• Name (Parameter of constructor)
• Hitpoints (100)
• Energy points (100)
• attack damage (30)

У класса FragTrap будут сообщения о создании и уничтожении. 
Кроме того, должна присутствовать правильная цепочка строительства / разрушения 
(когда вы строите FragTrap, вы должны начать с создания ClapTrap ... 
Разрушение происходит в обратном порядке), и тесты должны это показать.

Специальная функция для FragTrap будет 
void highFivesGuys(void)
и будет отображать положительный запрос высокой пятерки в стандартном выводе.

The specific function for FragTrap will be void highFivesGuys(void) and 
will display a positive high fives request on the standard output.

Расширьте свою основную функцию, чтобы все проверить.
_____________________________________________________________________
Глава V 
Упражнение 03: Now it’s weird!

_________________________________________________________________________
|                        Упражнение: 03                                 |
|_______________________________________________________________________|
|                      Вот это странно!                                 |
|_______________________________________________________________________|
|   Каталог сдачи: ex03/                                                |
|_______________________________________________________________________|
|   Файлы для передачи: Same as previous exercise +                     |
|                       DiamondTrap.cpp DiamondTrap.hpp                 |
|_______________________________________________________________________|
|   Запрещенные функции: нет                                            |
|_______________________________________________________________________|

Теперь вы создадите монстра, сделав Claptrap наполовину Fragtrap, 
наполовину ScavTrap.
Он будет называться DiamondTrap и будет унаследован как от FragTrap, 
так и от ScavTrap.

Очень рискованно и ужасно, что класс DiamondTrap объявит частный атрибут 
с именем name, подобный тому, который находится внутри ClapTrap.

Его атрибуты и функции будут выбраны из того и другого родительских классов:

• Имя (параметр конструктора)
• Claptrap :: Name (параметр конструктора + "_clap_name")
• Здоровье (Fragtrap)
• Очки энергии (Scavtrap)
• Урон от атаки (Fragtrap)
• атака (Scavtrap)

• Name (Parameter of constructor)
• Claptrap::Name (Parameter of constructor + "_clap_name")
• Hitpoints (Fragtrap)
• Energy points (Scavtrap)
• Attack damage (Fragtrap)
• attack (Scavtrap)

У него будут особые функции обоих.
Как обычно, ваш main будет расширен для тестирования нового класса.

Конечно, Claptrap часть в Diamondtrap будет создана один раз, и только один раз ...

Да, есть хитрость.

DiamondTrap будет иметь новую функцию void whoAmI(); которая отобразит его имя 
и имя clapTrap.

!!!!!info
!!  Compilation flags like -Wshadow and -Wno-shadow!
!!!!!