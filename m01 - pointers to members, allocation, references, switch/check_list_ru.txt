C++ - Module 01

Помните, что качество защиты, а значит, и качество школы на рынке труда зависит от вас. Удаленная защита во время кризиса Covid обеспечивает большую гибкость, чтобы вы могли продвигаться по своей учебной программе, но также несет больше рисков обмана, несправедливости, лени, которые повредят развитию навыков каждого. Мы действительно рассчитываем на вашу зрелость и мудрость во время этой удаленной защиты на благо всего сообщества.

МАСШТАБ ДЛЯ ПРОЕКТА CPP MODULE 01 (/ PROJECTS / CPP-MODULE-01)
Вы должны оценить 1 студента в этой команде

Вступление
- Оценивайте только те работы, которые находятся в репозитории GiT учащегося или группы.

- Еще раз проверьте, что репозиторий GiT принадлежит студенту или группе. Убедитесь, что работа предназначена для соответствующего проекта, а также убедитесь, что «git clone» используется в пустой папке.

- Тщательно проверьте, не использовались ли злонамеренные псевдонимы для того, чтобы обмануть вас и заставить оценить что-то, кроме содержания официального репозитория.

- Чтобы избежать сюрпризов, внимательно проверьте, ознакомились ли и оценивающие, и оцениваемые учащиеся с возможными сценариями, используемыми для облегчения выставления оценок.

- Если оценивающий студент еще не завершил этот конкретный проект, он обязательно должен прочитать весь предмет до начала защиты.

- Используйте флаги, доступные на этой шкале, чтобы сигнализировать о пустом репозитории, неработающей программе, ошибке нормы, мошенничестве и т. Д. В этих случаях оценка завершена, и итоговая оценка равна 0 (или -42 в случае мошенничества). Однако, за исключением обмана, вам рекомендуется продолжить обсуждение своей работы (даже если вы еще не закончили ее), чтобы выявить любые проблемы, которые могли вызвать этот сбой, и избежать повторения той же ошибки в будущем.

- Помните, что на время защиты не должно быть ошибок сегментации, никаких других неожиданных, преждевременных, неконтролируемых или неожиданных завершений программы, в противном случае итоговая оценка равна 0. Используйте соответствующий флаг. Вам никогда не придется редактировать какой-либо файл, кроме файла конфигурации, если он существует. Если вы хотите отредактировать файл, найдите время, чтобы объяснить причины с оцениваемым студентом и убедитесь, что вы оба согласны с этим.

- Также необходимо проверить отсутствие утечек памяти. Любая память, выделенная в куче, должна быть должным образом освобождена до завершения выполнения. Вам разрешено использовать любой из различных инструментов, доступных на компьютере, таких как leaks, valgrind или e_fence. В случае утечки памяти установите соответствующий флажок.

- Оставайтесь вежливыми, вежливыми, уважительными и конструктивными на протяжении всего процесса оценки. От этого зависит благополучие общества.

- Отождествите себя с человеком (или группой), оценившим возможные нарушения в работе. Найдите время, чтобы обсудить и обсудить выявленные вами проблемы.

- Вы должны учитывать, что может быть некоторая разница в том, как ваши коллеги могли понять инструкции проекта и объем его функций. Всегда сохраняйте непредвзятость и оценивайте его / ее как можно честно. Педагогика действительна только и только в том случае, если коллегиальная оценка проводится серьезно.

Вы должны компилировать с clang ++, with-Wall-Wextra-Werror Напоминаем, что этот проект находится на C ++ 98 и C ++ 20, функции или контейнеры НЕ ожидаются.

Любое из этих условий означает, что вы не должны оценивать рассматриваемое упражнение:
- Функция реализована в заголовке (кроме шаблона)
- Makeifle компилируется без флагов и / или с чем-то другим, кроме clang ++

Любое из этих действий означает, что вы должны пометить проект как запрещенную функцию:
- Использование функции "C" (* alloc, * printf, free)
- Использование функции, запрещенной в теме
- Использование словосочетаний «using namespace» или «friend»
- Использование внешней библиотеки или функций C ++ 20
Вложения  subject.pdf (https://cdn.intra.42.fr/pdf/pdf/25839/en.subject.pdf)


______
Ex00
Цель этого упражнения - понять, как выделить память в CPP.


Makefile and main
Существует Makeifle, который компилируется с использованием соответствующих флагов. Есть основная проверка упражнения.
Да Нет

Zombie Class
У него есть атрибут имени.
У него есть как минимум конструктор по умолчанию.
У него есть функция-член announce (void), которая печатает: "BraiiiiiiinnnzzzZ ..."
Деструктор печатает сообщение с именем зомби.
Да Нет

newZombie
Существует прототип функции newZombie:
[Зомби * newZombie (std :: string name); ]
Он должен выделить Зомби в куче и вернуть его.
  В идеале он должен вызывать конструктор, который принимает строку и инициализирует имя.
Упражнение следует отметить как правильное, если Зомби может заявить о себе с именем, переданным в функцию. Основное содержит тесты, подтверждающие это.
Зомби удаляется корректно до окончания программы.
Да Нет

randomChump
Существует прототип функции randomChump как:
[void randomChump (std :: string name); ]
Он должен создать зомби в стеке и заставить его заявить о себе. В идеале зомби должен быть размещен в стеке (поэтому неявно удаляется в конце функции).
Его также можно выделить в куче, а затем явно удалить.
Студент должен обосновать свой выбор.
Основное содержит тесты, подтверждающие это.
Да Нет

_________
Ex01

Цель этого упражнения - выделить несколько объектов одновременно с помощью new [], инициализировать их и правильно удалить.

Makefile and main

Существует Makeifle, который компилируется с использованием соответствующих флагов. Есть основная проверка упражнения.
Да Нет

зомби

Это функция zombieHorde, прототип которой:
 [Зомби * zombieHorde (int N, std :: string name); ]
Он выделяет N зомби в куче, явно используя new [].
После выделения происходит инициализация объектов для присвоения им имен.
Он возвращает указатель на зомби ifrst.
В основном тестов достаточно, чтобы подтвердить предыдущие пункты.
 Пример: вызов объявления () для всех зомби.
Наконец, на главной нужно удалить всех зомби одновременно.
Да Нет

ex02
Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки! Демистифицируйте ссылки!

Makefile и основной
Существует Makeifle, который компилируется с использованием соответствующих lfags.
Есть основная проверка упражнения.
Да Нет

ex04
Есть строка, содержащая «HI THIS IS BRAIN».
stringPTR указывает на строку.
 stringREF принимает ссылку на строку.
Адрес строки отображается с помощью строковой переменной, stringPTR и stringREF.
Строка отображается с использованием stringPTR и stringREF.
Да Нет
 
Ex03
  Цель этого упражнения - понять, что указатели и ссылки имеют некоторые небольшие различия, которые делают их более подходящими в зависимости от использования и жизненного цикла объекта, который мы собираемся использовать.

Makefile и основной

Существует Makeifle, который компилируется с использованием соответствующих lfags. Есть основная проверка упражнения.

___________

Да Нет

Оружие

Есть класс Weapon, у которого есть строка типа, getType и setType. Функция getType возвращает константную ссылку на строку типа.
Да Нет

HumanA и HumanB

HumanA может иметь ссылку или указатель на Оружие.
В идеале его следует использовать в качестве эталона, поскольку Оружие существует от создания до разрушения и никогда не меняется.
HumanB должен иметь указатель на оружие, потому что поле ifeld не установлено во время создания, и оружие может иметь значение NULL.
Да Нет

Ex04
Выполняя это упражнение, вы должны были познакомиться с ifstream и ofstream.

Makefile и основной
Существует Makeifle, который компилируется с использованием соответствующих lfags. Есть основная проверка упражнения.
Да Нет

Есть функция replace, которая работает так, как указано в теме. Управление ошибками хорошее: попробуйте передать файл, который не существует, измените разрешения, передайте его пустым и т.д. . Программа должна читать из ifle, используя ifstream или эквивалент, и писать, используя ofstream или эквивалент. Реализация функции должна выполняться с использованием функций из std :: string, нет путем чтения строки посимвольно. Это больше не Си!
Да Нет


________
Ex05

Цель этого упражнения - научить вас использовать указатели на функции-члены класса. Кроме того, мы считаем, что это отличный момент, чтобы познакомить вас с различными уровнями ведения журнала.

Makefile и основной
Существует Makeifle, который компилируется с использованием соответствующих lfags. Есть основная проверка упражнения.
Да Нет


Макейфле и главная

Существует Makeifle, который компилируется с использованием соответствующих lfags. Есть основная проверка упражнения.
Да Нет

Наша любимая Карен

Есть класс Карен как минимум с 5 необходимыми по предмету функциями.
Функция Пожаловаться () выполняет другие функции, используя указатель на них.
В идеале учащийся должен реализовать способ сопоставления различных строк, соответствующих уровню журнала, с указателями соответствующей функции-члена.
Если реализация отличается, но упражнение работает, вы должны отметить его как действительное.
Единственное, что недопустимо, - это иметь if / elseif / else.
Учащийся мог выбрать изменение сообщения, отображаемого Карен, или отображение примеров, приведенных в теме, оба варианта действительны.
Да Нет

ex06

 Теперь, когда вы стали взрослыми программистами, вы должны начать использовать новые типы инструкций, операторов, циклы и т. Д. Цель этого последнего упражнения - научить вас открывать для себя SWITCH.

Макейфле и главная

Существует Makeifle, который компилируется с использованием соответствующих lfags. Есть основная проверка упражнения.
Да Нет

Выключение Карен
Программа karenFilter принимает в качестве аргумента любой из уровней журнала: «ОТЛАДКА», «ИНФОРМАЦИЯ», «ПРЕДУПРЕЖДЕНИЕ» и «ОШИБКА». Затем он должен отображать только сообщения того же уровня или выше (debug <info <warning <error). Это должно быть реализовано с помощью оператора SWITCH. Еще раз, пожалуйста, больше никаких if / elseif / else. Переключатель должен иметь корпус по умолчанию.
Да Нет

